//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeliveryPortalDL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DashboardEntities : DbContext
    {
        public DashboardEntities()
            : base("name=DashboardEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<MST_Account> MST_Account { get; set; }
        public DbSet<MST_Attributes> MST_Attributes { get; set; }
        public DbSet<MST_AttributeTypes> MST_AttributeTypes { get; set; }
        public DbSet<MST_AttributeValues> MST_AttributeValues { get; set; }
        public DbSet<MST_Employee> MST_Employee { get; set; }
        public DbSet<MST_EstBasis> MST_EstBasis { get; set; }
        public DbSet<MST_Flags> MST_Flags { get; set; }
        public DbSet<MST_Functionality> MST_Functionality { get; set; }
        public DbSet<MST_Geo> MST_Geo { get; set; }
        public DbSet<MST_IDP> MST_IDP { get; set; }
        public DbSet<MST_Methodology> MST_Methodology { get; set; }
        public DbSet<MST_NoW> MST_NoW { get; set; }
        public DbSet<MST_Project> MST_Project { get; set; }
        public DbSet<MST_Project_Temp> MST_Project_Temp { get; set; }
        public DbSet<MST_ProjectAttributes> MST_ProjectAttributes { get; set; }
        public DbSet<MST_ProjectCodes> MST_ProjectCodes { get; set; }
        public DbSet<MST_Questionnaire> MST_Questionnaire { get; set; }
        public DbSet<MST_ReviewQuestion> MST_ReviewQuestion { get; set; }
        public DbSet<MST_ReviewStatus> MST_ReviewStatus { get; set; }
        public DbSet<MST_ReviewType> MST_ReviewType { get; set; }
        public DbSet<MST_Sector> MST_Sector { get; set; }
        public DbSet<Tran_DE_Calendar> Tran_DE_Calendar { get; set; }
        public DbSet<Tran_EmailConfiguration> Tran_EmailConfiguration { get; set; }
        public DbSet<Tran_IDP_Attributes> Tran_IDP_Attributes { get; set; }
        public DbSet<Tran_Proj_DE_Attibute> Tran_Proj_DE_Attibute { get; set; }
        public DbSet<Tran_Proj_DE_Review> Tran_Proj_DE_Review { get; set; }
        public DbSet<Tran_Proj_IDP_Attributes> Tran_Proj_IDP_Attributes { get; set; }
        public DbSet<Tran_Proj_ProjCode_Details> Tran_Proj_ProjCode_Details { get; set; }
        public DbSet<Tran_Proj_Wkly_Attributes_Status> Tran_Proj_Wkly_Attributes_Status { get; set; }
        public DbSet<Tran_Proj_Wkly_Status> Tran_Proj_Wkly_Status { get; set; }
        public DbSet<Tran_Project_IDP_Attributes> Tran_Project_IDP_Attributes { get; set; }
    
        [EdmFunction("DashboardEntities", "ufn_GetWeekList")]
        public virtual IQueryable<ufn_GetWeekList_Result> ufn_GetWeekList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufn_GetWeekList_Result>("[DashboardEntities].[ufn_GetWeekList]()");
        }
    
        public virtual ObjectResult<GetDEDashboardDetails_Result> GetDEDashboardDetails(Nullable<int> iDPId, Nullable<int> accountId, Nullable<int> geoId, Nullable<int> sectorId, Nullable<int> weekID, Nullable<bool> isStrategic, Nullable<bool> isRA, Nullable<int> sectorId2)
        {
            var iDPIdParameter = iDPId.HasValue ?
                new ObjectParameter("IDPId", iDPId) :
                new ObjectParameter("IDPId", typeof(int));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var geoIdParameter = geoId.HasValue ?
                new ObjectParameter("GeoId", geoId) :
                new ObjectParameter("GeoId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var weekIDParameter = weekID.HasValue ?
                new ObjectParameter("WeekID", weekID) :
                new ObjectParameter("WeekID", typeof(int));
    
            var isStrategicParameter = isStrategic.HasValue ?
                new ObjectParameter("IsStrategic", isStrategic) :
                new ObjectParameter("IsStrategic", typeof(bool));
    
            var isRAParameter = isRA.HasValue ?
                new ObjectParameter("IsRA", isRA) :
                new ObjectParameter("IsRA", typeof(bool));
    
            var sectorId2Parameter = sectorId2.HasValue ?
                new ObjectParameter("SectorId2", sectorId2) :
                new ObjectParameter("SectorId2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDEDashboardDetails_Result>("GetDEDashboardDetails", iDPIdParameter, accountIdParameter, geoIdParameter, sectorIdParameter, weekIDParameter, isStrategicParameter, isRAParameter, sectorId2Parameter);
        }
    
        public virtual ObjectResult<GetDEDashboardDetails_New_Result> GetDEDashboardDetails_New(Nullable<int> accountId, Nullable<int> geoId, Nullable<int> sectorId, Nullable<bool> isStrategic, Nullable<bool> isRA)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var geoIdParameter = geoId.HasValue ?
                new ObjectParameter("GeoId", geoId) :
                new ObjectParameter("GeoId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var isStrategicParameter = isStrategic.HasValue ?
                new ObjectParameter("IsStrategic", isStrategic) :
                new ObjectParameter("IsStrategic", typeof(bool));
    
            var isRAParameter = isRA.HasValue ?
                new ObjectParameter("IsRA", isRA) :
                new ObjectParameter("IsRA", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDEDashboardDetails_New_Result>("GetDEDashboardDetails_New", accountIdParameter, geoIdParameter, sectorIdParameter, isStrategicParameter, isRAParameter);
        }
    
        public virtual ObjectResult<GetProjectAttributes_Result> GetProjectAttributes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectAttributes_Result>("GetProjectAttributes");
        }
    
        public virtual ObjectResult<RetrieveProjectDetails_Result> RetrieveProjectDetails(Nullable<int> accountId, Nullable<int> geoId, Nullable<int> sectorId, Nullable<bool> isStrategic)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var geoIdParameter = geoId.HasValue ?
                new ObjectParameter("GeoId", geoId) :
                new ObjectParameter("GeoId", typeof(int));
    
            var sectorIdParameter = sectorId.HasValue ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(int));
    
            var isStrategicParameter = isStrategic.HasValue ?
                new ObjectParameter("IsStrategic", isStrategic) :
                new ObjectParameter("IsStrategic", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveProjectDetails_Result>("RetrieveProjectDetails", accountIdParameter, geoIdParameter, sectorIdParameter, isStrategicParameter);
        }
    
        public virtual int RetrieveProjectDetailsByProID(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrieveProjectDetailsByProID", projectIdParameter);
        }
    
        public virtual ObjectResult<Tran_Proj_Wkly_Status_SelectAll_Result> Tran_Proj_Wkly_Status_SelectAll(Nullable<int> proID, Nullable<int> weekID)
        {
            var proIDParameter = proID.HasValue ?
                new ObjectParameter("ProID", proID) :
                new ObjectParameter("ProID", typeof(int));
    
            var weekIDParameter = weekID.HasValue ?
                new ObjectParameter("WeekID", weekID) :
                new ObjectParameter("WeekID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tran_Proj_Wkly_Status_SelectAll_Result>("Tran_Proj_Wkly_Status_SelectAll", proIDParameter, weekIDParameter);
        }
    }
}
